#Labs-Cache Lab
---

## Part A Implement a cache simulator
* Programming Rules
	* It uses **LRU**(least-recently used)replacement policy
	* Part A only interests in data cache performance

* Programming Reflection
	* `malloc`
	
		```
		#include <stdlib.h>
		T ** array;
		array = (T **)malloc(sizeof(T *) * RowNumber);
		if (array == NULL) exit(-1);
		for (int i = 0; i < RowNumber; i++) {
			array[i] = (T *)malloc(sizeof(T) * ColNumber);
		}
		for (int i = 0; i < RowNumber; i++) {
			free(array[i]);
		}
		free(array);
		``` 
	* How to define a set and the use of `struct`
	  
	  	```
		// one set struct definition
		struct set {
			int *valid;  		     //array
			long *tag;				 //array
			clock_t *lastAccessTime; //array
		}
		```
	* Handle the *load* operation(load)
	
		```
		load(){
			if cache hit:
				hit++;
			else:
				miss++;
				if there exists empty block:
					fill
				else:
					evict++;
					LRU-replace;
		}
		``` 
	* Handle the *store* operation(write)
		* This lab does not involved the write strategy (write-throught/write-back) 	
		* When write not hit(miss), it is prefered to use **write-allocate** in CSAPP, which refers to **load** the data from the lower cache hierarchy.

		```
		store(){
			if cache hit:
				hit++;
			else:
				load();
		}
		```
	* Handle the *modify* operation:
		* combine load and store



This is the handout directory for the CS:APP Cache Lab. 

************************
Running the autograders:
************************

Before running the autograders, compile your code:
    linux> make

Check the correctness of your simulator:
    linux> ./test-csim

Check the correctness and performance of your transpose functions:
    linux> ./test-trans -M 32 -N 32
    linux> ./test-trans -M 64 -N 64
    linux> ./test-trans -M 61 -N 67

Check everything at once (this is the program that your instructor runs):
    linux> ./driver.py    

******
Files:
******

# You will modifying and handing in these two files
csim.c       Your cache simulator
trans.c      Your transpose function

# Tools for evaluating your simulator and transpose function
Makefile     Builds the simulator and tools
README       This file
driver.py*   The driver program, runs test-csim and test-trans
cachelab.c   Required helper functions
cachelab.h   Required header file
csim-ref*    The executable reference cache simulator
test-csim*   Tests your cache simulator
test-trans.c Tests your transpose function
tracegen.c   Helper program used by test-trans
traces/      Trace files used by test-csim.c


